<?php

/**
 * @file
 * This module creates a formatter for CCK filefields that
 * shows a snapshot of the first page of pdf files as link
 * to the file.
 *
 * @defgroup pdfpreview PDFPreview: generate snapshots of PDF files to use as link to them.
 * @author Juanjo Garcia <juanjo.gcia@gmail.com>
 *  Main file for the pdfpreview module
 *
 */

/**
 * Implements hook_field_formatter_info().
 */
function pdfpreview_field_formatter_info() {
  $formatters = array(
    'default' => array(
      'label' => t('PDF Preview'),
      'field types' => array('filefield'),
      'description' => t('Displays an snapshot of the first page of the PDF'),
    ),
  );

  if (module_exists('imagecache')) {
    foreach (imagecache_presets() as $preset) {
      $formatters[$preset['presetname'] . '][pdfpreview'] = array(
        'label' => t('PDF Preview: @preset image', array('@preset' => $preset['presetname'])),
        'field types' => array('filefield'),
        'description' => t('Display an snapshot using imagecache preset @preset', array('@preset' => $preset['presetname'])),
      );
    }
  }
  return $formatters;
}

/**
 * Implements hook_theme().
 *
 * We declare our theme functions according to the array keys in hook_field_formatter_info
 */
function pdfpreview_theme() {
  $theme = array(
    'pdfpreview_formatter_default' => array(
      'function' => 'theme_pdfpreview_formatter',
      'arguments' => array('element' => NULL),
    ),
  );

  if (module_exists('imagecache')) {
    foreach (imagecache_presets() as $preset) {
      $theme['pdfpreview_formatter_'. $preset['presetname'] . '][pdfpreview'] = array(
        'function' => 'theme_pdfpreview_formatter',
        'arguments' => array('element' => NULL),
      );
    }
  }

  return $theme;
}

/**
 * Theming functions for our formatters
 */
function theme_pdfpreview_formatter($element) {
  $output = '';
  $item = $element['#item'];
  if ($item['filemime'] != 'application/pdf' or $item['list'] != 1) return '';
  $output_dir = file_directory_path() . '/' . variable_get('pdfpreview_pathtoimages', 'pdfpreview');
  $output_filename = $output_dir . '/' . md5($item['fid']) .'.jpg';
  if (!file_exists($output_dir)) {
    if (!mkdir($output_dir)) {
      drupal_set_message(t('Error creating directory @dir', array('%dir' => $output_directory)), 'error');
      watchdog('pdfpreview', 'Error creating directory @dir', array('%dir' => $output_directory), WATCHDOG_ERROR);
      return '';
    }
    $message = t('The directory %dir has been created', array('%dir' => $output_directory));
    watchdog('pdfpreview', 'The directory %dir has been created', array('%dir' => $output_directory));
    drupal_set_message($message, 'status');
  }
  elseif (!is_dir($output_dir)) {
    $message = t('The path %dir is not a directory', array('%dir' => $output_directory));
    watchdog('pdfpreview', 'The path %dir is not a directory', array('%dir' => $output_directory), WATCHDOG_ERROR);
    drupal_set_message($message, 'error');
    return '';
  }
  if (!file_exists($output_filename) && function_exists('_imageapi_imagemagick_convert_exec')) {
    _imageapi_imagemagick_convert_exec($item['filepath'] ."[0] $output_filename", $cmd_output, $cmd_errors);
  }
  $output = '<img src="' . base_path() . $output_filename . '" title="' . $item['data']['description'] . '" alt="' . $item['data']['description'] .'" />';
  if (list($namespace, $presetname) = explode('][', $element['#formatter'], 2)) {
    if ($preset = imagecache_preset_by_name($namespace)) {
      $output = theme('imagecache', $namespace, $output_filename, $item['data']['alt'], $item['data']['title']);
    }
  }
  $tag = variable_get('pdfpreview_tag', 'span');
  $description = (variable_get("pdfpreview_description", 1))?"<$tag class=\"pdfpreview-description\">{$item['data']['description']}</$tag>" : "";
  return "<div class=\"pdfpreview\" id=\"pdfpreview-{$item['fid']}\">
    <$tag class=\"image-wrapper\"><a href=\"" . base_path() . "{$item['filepath']}\" title=\"{$item['data']['description']}\">
    $output</a></$tag>$description</div>";
}

/**
 * Implements hook_menu()
 */
function pdfpreview_menu() {
  $items = array(
      'admin/settings/pdfpreview' => array(
          'title' => 'Configure PDF Preview',
          'description' => 'Configure PDF Preview settings',
          'access arguments' => array('administer content'),
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pdfpreview_admin_settings'),
          'type' => MENU_NORMAL_ITEM,
      ),
      );
  return $items;
}

/**
 * Creates the settings form to tune how pdfpreview works.
 * @return themed settings form
 */
function pdfpreview_admin_settings() {
  $form = array(
      'pdfpreview_pathtoimages' => array(
          '#type' => 'textfield',
          '#title' => t('Images folder'),
          '#description' => t('Path, inside files directory, where snapshots are stored. For example <em>pdfpreview</em>'),
          '#default_value' => variable_get('pdfpreview_pathtoimages', 'pdfpreview'),
      ),
      'pdfpreview_description' => array(
          '#type' => 'checkbox',
          '#title' => t('Description'),
          '#description' => t('Show file description beside image'),
          '#options' => array(0 => t('No'), 1 => t('Yes')),
          '#default_value' => variable_get('pdfpreview_description', 1),
      ),
      'pdfpreview_tag' => array(
          '#type' => 'radios',
          '#title' => t('HTML tag'),
          '#description' => t('Select which kind of HTML element will be used to theme elements'),
          '#options' => array('span' => 'span', 'div' => 'div'),
          '#default_value' => variable_get('pdfpreview_tag', 1),
      ),
  );

  return system_settings_form($form);
}
